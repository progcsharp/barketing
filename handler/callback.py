import hashlib
import time

from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from State.form import EditText, RefLinkStates
from config import ROBOKASSA_LOGIN, ROBOKASSA_PASS1
from db.handler.delete import delete_link
from db.handler.get import get_message, get_messages, get_links, get_link, check_pay_course
from db.handler.update import update_user
from handler.commands import admin_cmd
from payment.pay import process_payment, verify_robokassa_payment


async def call_step1(call: types.CallbackQuery):
    # await call.message.delete()

    builder = InlineKeyboardBuilder()

    # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
    builder.add(types.InlineKeyboardButton(
        text="–ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
        callback_data="step2")
    )

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (1 –≤ —Ä—è–¥ - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ)
    builder.adjust(1)

    # message_text = (
    #     "üéØ <b>–¢–≤–æ–∏ —Å–∫—Ä–∏–ø—Ç—ã –ó–î–ï–°–¨! –°–∫–∞—á–∏–≤–∞–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ!</b>\n"
    #     "(–î–æ—Å—Ç—É–ø –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ)\n\n"
    #     "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    #     "üåü <b>–ß–µ–º —ç—Ç–æ—Ç –∫—É—Ä—Å —É–Ω–∏–∫–∞–ª–µ–Ω?</b>\n\n"
    #     "‚ñ´Ô∏è <b>–°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–æ–º –∏ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–æ–º</b> –≤ –æ–¥–Ω–æ–º –ª–∏—Ü–µ\n"
    #     "‚ñ´Ô∏è <b>–ü–æ–¥—Ö–æ–¥–∏—Ç –∫–∞–∫ –Ω–æ–≤–∏—á–∫–∞–º, —Ç–∞–∫ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞–º</b> - –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ—Ç —Ü–µ–Ω–Ω–æ–µ\n"
    #     "‚ñ´Ô∏è <b>–ü–æ—à–∞–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞</b> - –≤–µ—Å—å –º–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç –ê –¥–æ –Ø\n"
    #     "‚ñ´Ô∏è <b>–†–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã</b> —Å –∂–∏–≤—ã–º–∏ –¥–∏–∞–ª–æ–≥–∞–º–∏ –∏ –∞—É–¥–∏–æ –ø—Ä–∏–º–µ—Ä–∞–º–∏\n"
    #     "‚ñ´Ô∏è <b>–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø</b> - —É—á–∏—Å—å –≤ —É–¥–æ–±–Ω–æ–º —Ç–µ–º–ø–µ\n"
    #     "‚ñ´Ô∏è <b>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ—Ä—è–¥</b> - –ø—Ä–∏—è—Ç–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –∏ —É—á–∏—Ç—å—Å—è\n\n"
    #     "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    #     "üí° –ù–∞–∂–º–∏ '–ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã' –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ —Ç—Ä–µ–π–ª–µ—Ä –∫—É—Ä—Å–∞!"
    # )
    message_text = await get_message("step2_text")
    link_video = await get_message("link_video")
    print(link_video)

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    await call.message.answer_video(
        video=link_video,
        caption=await get_message("text_video"),
        parse_mode="HTML"
    )

    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await call.message.answer(
        text=message_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


async def call_step2(call: types.CallbackQuery):
    # await call.message.delete()

    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞",
        callback_data="step3")
    )

    # –ï–¥–∏–Ω–æ–µ –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    # message_text = (
    #     "üîÆ <b>–î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —É —Ç–µ–±—è –ù–ê–í–°–ï–ì–î–ê!</b>\n\n"
    #     "–ù–æ —É–∂–µ —á–µ—Ä–µ–∑ <b>3 –î–ù–Ø</b> –æ–±—É—á–µ–Ω–∏—è (–∫–∞–∫ –∏ 95% –º–æ–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤) —Ç—ã:\n\n"
    #     "1Ô∏è‚É£ –ù–∞—É—á–∏—à—å—Å—è —É–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–º –∏ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–µ–π, –ø—Ä–æ–¥–∞–≤–∞—Ç—å —ç–º–æ—Ü–∏—è–º–∏\n"
    #     "2Ô∏è‚É£ –ü–µ—Ä–µ—Å—Ç–∞–Ω–µ—à—å –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –ø–æ—Å–ª–µ ¬´–Ø –ø–æ–¥—É–º–∞—é¬ª –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞\n"
    #     "3Ô∏è‚É£ –ù–∞—É—á–∏—à—å—Å—è ¬´–≤–µ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞ —Ä—É–∫—É¬ª –∏ –±—ã—Ç—å –∞–ª—å—Ñ–æ–π –≤ –¥–∏–∞–ª–æ–≥–µ\n"
    #     "4Ô∏è‚É£ –ü–æ–π–º–µ—à—å –≤–∞–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö\n"
    #     "5Ô∏è‚É£ –£–∑–Ω–∞–µ—à—å –∫–∞–∫ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –∫–ª–æ—á–æ–∫ –±—É–º–∞–≥–∏ –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π –≤ –∂–∏–≤—ã–µ –¥–µ–Ω—å–≥–∏\n"
    #     "6Ô∏è‚É£ <b>–ù–ê–ß–ù–ï–®–¨ –ó–ê–†–ê–ë–ê–¢–´–í–ê–¢–¨ –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û –ë–û–õ–¨–®–ï</b>, —á–µ–º —Å–µ–π—á–∞—Å\n\n"
    #     "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    #     "üíé <i>–ó–∞–º–∞–Ω—á–∏–≤–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞?</i>\n"
    #     "–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ <b>–°–¢–û–ò–ú–û–°–¢–¨ –ö–£–†–°–ê</b>!"
    # )
    message_text = await get_message("step3_text")

    await call.message.answer(
        text=message_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


async def call_step3(call: types.CallbackQuery):
    # await call.message.delete()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ)
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="–¢–∞—Ä–∏—Ñ –ø–æ–ª–Ω—ã–π - 13 100 —Ä—É–±.",
            callback_data="fullprice"
        ),
        types.InlineKeyboardButton(
            text="–ü—Ä–æ–¥–∞–∂–∏ –æ—Ç 0 –¥–æ PRO - 9 450 —Ä—É–±.",
            callback_data="price2"
        ),
        types.InlineKeyboardButton(
            text="–°–ø–µ—Ü–∫—É—Ä—Å - 6 400 —Ä—É–±.",
            callback_data="Special course"
        )
    )

    builder.adjust(1)  # 1 –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥ ‚Üí –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ

    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    # message_text = (
    #     "<b>–ö—É—Ä—Å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 11 –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ç—Å–Ω—è—Ç—ã—Ö –≤–∏–¥–µ–æ-—É—Ä–æ–∫–æ–≤</b> üé•\n\n"
    #     "–ß—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –ø–æ–ª–µ–∑–Ω–æ (–∏ –æ—Ç–ª–∏—á–∞–µ—Ç –∫—É—Ä—Å –æ—Ç –¥—Ä—É–≥–∏—Ö) ‚Äî "
    #     "<b>–¥–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –†–ï–ê–õ–¨–ù–´–ú–ò –ü–†–ò–ú–ï–†–ê–ú–ò –î–ò–ê–õ–û–ì–û–í</b> "
    #     "(–∞—É–¥–∏–æ + –ø–µ—Ä–µ–ø–∏—Å–∫–∏).\n\n"
    #     "----------------------------------\n"
    #     "<b>–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?</b>\n"
    #     "1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å—Ç—Ä–∞—Ö –ø–µ—Ä–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞ / –≤—Å—Ç—Ä–µ—á–∏\n"
    #     "2. –£–ª—ã–±–∫–∞ ‚Äì —Ç–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±—É—Å—Ç–µ—Ä\n"
    #     "3. –ú–∞–≥–∏—è –∏–º–µ–Ω–∏\n"
    #     "4. –ó–∞–ø–∏—Å–∫–∏ —Å—É–º–∞—Å—à–µ–¥—à–µ–≥–æ\n"
    #     "5. –¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª? –°—Ç–∞–Ω—å –∏–º!\n"
    #     "6. –í—ã—è–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞\n"
    #     "7. –£–¢–ü –∏ –ö–ü ‚Äì —á—Ç–æ —ç—Ç–æ –∏ –ø–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?\n"
    #     "8. –†–∞–±–æ—Ç–∞ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏\n"
    #     "9. –§–∏–∫—Å–∞—Ü–∏—è —Å–¥–µ–ª–∫–∏\n"
    #     "10. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏\n\n"
    #     "----------------------------------\n"
    #     "üí° –£–∂–µ —á–µ—Ä–µ–∑ 3 –¥–Ω—è —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏ –±—ã—Å—Ç—Ä–µ–µ –∏ —É–≤–µ—Ä–µ–Ω–Ω–µ–µ!\n"
    #     "–í—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ ‚Äî –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É <b>¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª</b> –Ω–∏–∂–µ ‚§µÔ∏è"
    # )
    message_text = await get_message("step4_text")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await call.message.answer(
        text=message_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


async def process_fullprice(callback: types.CallbackQuery):
    # await callback.message.delete()
    await process_payment(callback.message, 13100, "–ü–æ–ª–Ω—ã–π —Ç–∞—Ä–∏—Ñ", "full")


async def process_price2(callback: types.CallbackQuery):
    # await callback.message.delete()
    await process_payment(callback.message, 9450, "–ü—Ä–æ–¥–∞–∂–∏ –æ—Ç 0 –¥–æ PRO", "pro")


async def process_special(callback: types.CallbackQuery):

    if check_pay_course(callback.from_user.id):
        await callback.message.answer("–î–∞–Ω–Ω—ã–π –∫—É—Ä—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–∞ '–ü—Ä–æ–¥–∞–∂–∏ –æ—Ç 0 –¥–æ PRO'")
    else:
        await callback.message.delete()
        await process_payment(callback.message, 6400, "–°–ø–µ—Ü–∫—É—Ä—Å", "special")


# async def process_payment(message: types.Message, amount: int, product_name: str):
#
#
#     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Robokassa
#     payment_url = generate_robokassa_link(
#         amount=amount,
#         description=product_name,
#         order_id=f"{message.from_user.id}_{int(time.time())}"
#     )
#
#     builder = InlineKeyboardBuilder()
#     builder.add(
#         types.InlineKeyboardButton(
#             text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
#             url=payment_url
#         ),
#         types.InlineKeyboardButton(
#             text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª",
#             callback_data="check_payment"
#         )
#     )
#     builder.adjust(1)
#
#     message_text = await get_message("pay")
#     message_text = message_text.replace("?tariff_name", product_name)
#     message_text = message_text.replace("?price", amount)
#
#     await message.answer(
#         text=message_text,
#         reply_markup=builder.as_markup(),
#         parse_mode="HTML"
#     )
#
#
# def generate_robokassa_link(amount: int, description: str, order_id: str) -> str:
#     """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Robokassa"""
#     # –î–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ Robokassa
#     merchant_login = ROBOKASSA_LOGIN
#     password1 = ROBOKASSA_PASS1  # –ü–∞—Ä–æ–ª—å 1 –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
#
#     # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
#     signature = hashlib.md5(
#         f"{merchant_login}:{amount}:{order_id}:{password1}".encode()
#     ).hexdigest()
#
#     return (
#         f"https://auth.robokassa.ru/Merchant/Index.aspx?"
#         f"MerchantLogin={merchant_login}&"
#         f"OutSum={amount}&"
#         f"InvId={order_id}&"
#         f"Description={description}&"
#         f"SignatureValue={signature}&"
#         f"IsTest=1"  # 1 - –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã, 0 - –¥–ª—è –±–æ–µ–≤–æ–π
#     )


async def check_payment(callback: types.CallbackQuery):
    # –†–∞–∑–±–∏–≤–∞–µ–º callback_data –Ω–∞ —á–∞—Å—Ç–∏
    _, order_id, tariff_name = callback.data.split(":")  # –ü–æ–ª—É—á–∞–µ–º "check_payment:12345" ‚Üí ["check_payment", "12345"]

    try:
        order_id = int(order_id)
        is_paid = True#await verify_robokassa_payment(order_id)
        if tariff_name in ["full", "pro"]:
            update_user(callback.from_user.id)

        if is_paid:
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="üì• –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
                callback_data=f"get_materials:{tariff_name}"
            ))
            await callback.message.edit_text(
                text="‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!",
                reply_markup=builder.as_markup()
            )
        else:
            await callback.answer("–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.", show_alert=True)

    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


async def send_materials(callback: types.CallbackQuery):
    # await callback.message.delete()
    _, tariff_name = callback.data.split(":")

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    if tariff_name == "full":
        await callback.message.answer(
            text="<b>üéâ –í–∞—à–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≥–æ—Ç–æ–≤—ã tariff_name = full!</b>\n\n"
                 "1. <a href='https://example.com/course.pdf'>–û—Å–Ω–æ–≤–Ω–æ–π –∫—É—Ä—Å (PDF)</a>\n"
                 "2. <a href='https://example.com/bonus.zip'>–ë–æ–Ω—É—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</a>\n\n"
                 "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    if tariff_name == "pro":
        await callback.message.answer(
            text="<b>üéâ –í–∞—à–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≥–æ—Ç–æ–≤—ã tariff_name = pro!</b>\n\n"
                 "1. <a href='https://example.com/course.pdf'>–û—Å–Ω–æ–≤–Ω–æ–π –∫—É—Ä—Å (PDF)</a>\n"
                 "2. <a href='https://example.com/bonus.zip'>–ë–æ–Ω—É—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</a>\n\n"
                 "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    if tariff_name == "special":
        await callback.message.answer(
            text="<b>üéâ –í–∞—à–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≥–æ—Ç–æ–≤—ã tariff_name = special!</b>\n\n"
                 "1. <a href='https://example.com/course.pdf'>–û—Å–Ω–æ–≤–Ω–æ–π –∫—É—Ä—Å (PDF)</a>\n"
                 "2. <a href='https://example.com/bonus.zip'>–ë–æ–Ω—É—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</a>\n\n"
                 "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML",
            disable_web_page_preview=True
        )


##admin

async def edit_texts_menu(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
    for message in await get_messages():

        builder.add(
            types.InlineKeyboardButton(
                text=message.title,
                callback_data=f"edit_text_{message.slug}"
            )
        )

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.add(
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="admin_back"
        )
    )

    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥

    await callback.message.edit_text(
        "üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


async def show_text_to_edit(callback: types.CallbackQuery):
    text_slug = callback.data.split("_", 2)[-1]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∏–∑ –ë–î (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å)
    current_text = await get_message(text_slug)

    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç",
            callback_data=f"change_text_{text_slug}"
        ),
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="admin_edit_texts"
        )
    )

    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n"
        f"------------------\n"
        f"{current_text}\n"
        f"------------------",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


async def request_new_text(callback: types.CallbackQuery, state: FSMContext):
    text_slug = callback.data.split("_", 2)[-1]
    await state.update_data({"slug": text_slug})
    await state.set_state(EditText.message)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º slug —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FSM)
    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç :\n"
        f"–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É",
        parse_mode="HTML"
    )


async def admin_back(callback: types.CallbackQuery):
    await callback.message.delete()
    await admin_cmd(callback.message)


async def ref_links_menu(callback: types.CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏"""
    builder = InlineKeyboardBuilder()

    builder.row(
        types.InlineKeyboardButton(
            text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏",
            callback_data="view_ref_links"
        )
    )

    builder.row(
        types.InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É",
            callback_data="add_ref_link"
        )
    )

    builder.row(
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="admin_back"
        )
    )

    await callback.message.edit_text(
        "üîó <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


async def view_ref_links(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"""

    links = await get_links()

    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏
    for link in links:
        builder.row(
            types.InlineKeyboardButton(
                text=f"{link.name} (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {link.count})",
                callback_data=f"ref_link_detail_{link.id}"
            )
        )

    builder.row(
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="admin_ref_links"
        )
    )

    await callback.message.edit_text(
        "üìã <b>–°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


async def ref_link_detail(callback: types.CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ"""
    link_id = int(callback.data.split("_")[-1])
    link = await get_link(link_id)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="‚ùå –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É",
            callback_data=f"delete_ref_link_{link.id}"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
            callback_data="view_ref_links"
        )
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    message_text = (
        "üîç <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Å—ã–ª–∫–µ</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {link.name}\n"
        f"<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:</b> {link.count}\n"
        f"<b>–ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
        f"<code>https://t.me/Test_12_12_12345_bot?start={link.url}</code>"
    )

    await callback.message.edit_text(
        text=message_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


async def confirm_delete(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏"""
    link_id = int(callback.data.split("_")[-1])
    link = await delete_link(link_id)

    if link:
        await callback.message.edit_text(
            text=f"‚úÖ –°—Å—ã–ª–∫–∞ <b>{link.name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
            parse_mode="HTML"
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å—Å—ã–ª–æ–∫
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                callback_data="view_ref_links"
            )
        )
        await callback.message.edit_reply_markup(
            reply_markup=builder.as_markup()
        )
    else:
        await callback.answer("–°—Å—ã–ª–∫–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)


async def add_ref_link_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(RefLinkStates.waiting_for_name)
    await callback.message.edit_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞",
                    callback_data="cancel_ref_creation"
                )
            ]]
        )
    )


async def cancel_ref_creation(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await ref_links_menu(callback)
