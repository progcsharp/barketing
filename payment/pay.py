import hashlib
import time
import requests
from urllib.parse import quote

from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import ROBOKASSA_LOGIN, ROBOKASSA_PASS1, ROBOKASSA_PASS2
from db.handler.get import get_message


async def process_payment(message: types.Message, amount: int, product_name: str, tariff_name: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏ Robokassa"""

    order_id = int(time.time())
    payment_url = generate_robokassa_link(
        amount=amount,
        description=product_name,
        order_id=order_id  # –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!
    )

    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
            url=payment_url
        ),
        types.InlineKeyboardButton(
            text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª",
            callback_data=f"check_payment:{order_id}:{tariff_name}"
        )
    )
    builder.adjust(1)

    message_text = await get_message("pay")
    message_text = message_text.replace("?tariff_name", product_name)
    message_text = message_text.replace("?price", str(amount))

    await message.answer(
        text=message_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


def generate_robokassa_link(amount: int, description: str, order_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Robokassa"""
    merchant_login = ROBOKASSA_LOGIN
    password1 = ROBOKASSA_PASS1

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ upper())
    signature = hashlib.md5(
        f"{merchant_login}:{amount}:{order_id}:{password1}".encode()
    ).hexdigest().upper()

    # URL-encode –æ–ø–∏—Å–∞–Ω–∏–µ
    description_encoded = quote(description)

    return (
        f"https://auth.robokassa.ru/Merchant/Index.aspx?"
        f"MerchantLogin={merchant_login}&"
        f"OutSum={amount}&"
        f"InvId={order_id}&"
        f"Description={description_encoded}&"
        f"SignatureValue={signature}&"
        f"IncCurrLabel=RUB&"  # –í–∞–ª—é—Ç–∞
        f"IsTest=1"  # 1 - —Ç–µ—Å—Ç, 0 - –±–æ–µ–≤–æ–π —Ä–µ–∂–∏–º
    )


async def verify_robokassa_payment(order_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API Robokassa"""
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            'MerchantLogin': ROBOKASSA_LOGIN,
            'InvoiceID': order_id,
            'Signature': generate_robokassa_signature(order_id)
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Robokassa
        response = requests.get(
            'https://auth.robokassa.ru/Merchant/WebService/Service.asmx/OpState',
            params=params
        )
        response.raise_for_status()

        # –ü–∞—Ä—Å–∏–º XML –æ—Ç–≤–µ—Ç (–ø—Ä–∏–º–µ—Ä: <StateResponse><Code>0</Code></StateResponse>)
        if 'Code>0</Code' in response.text:
            return True
    except Exception as e:
        print(f"Error checking payment: {e}")
    return False


def generate_robokassa_signature(order_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    signature_str = f"{ROBOKASSA_LOGIN}:{order_id}:{ROBOKASSA_PASS2}"
    return hashlib.md5(signature_str.encode()).hexdigest().upper()
